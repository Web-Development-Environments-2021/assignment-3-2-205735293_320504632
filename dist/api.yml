openapi: 3.0.0
info:
  title: api
  description: API for  project
  version: 1.0.0
tags:
  - name: Users
  - name: Auth
  - name: League
  - name: Players
  - name: Teams
  - name: Games
  - name: Search
  - name: Manage
paths:
  /Register:
    post:
      tags:
        - Auth
      summary: Add new user
      description: A new user from the client is added to the server
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: A new user has been added
        "400":
          description: wrong input parameters
  /Login:
    post:
      tags:
        - Auth
      summary: Login an exist user
      description: An exist user login to the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginScheme"
      responses:
        "200":
          description: >
            User was found in the DB and authenitcated successfully.
            The session ID is returned in a cookie named `session`. 
            You should include this cookie in subsequent requests
          # headers:
          #   Set-Cookie:
          #     schema:
          #       type: string
          #       example: session=87s97sdhgf279293f8w0e9
            # Note that the Set-Cookie header and securitySchemes are not connected in any way, and the Set-Header definition is for documentation purposes only.
        "401":
          description: Authentication failed
  /logout:
    post:
      tags:
        - Auth
      summary: logout a user from the system and delete his cookie
      responses:
        "200":
          description: "the user has ben successfully logged out"
  /league/getDetails:
    get:
      tags:
        - League
      summary: Return the details about the current league
      responses:
        "200":
          description: data about the current league returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/League"
        "400":
          description: wrong input parameters
  /users/favoritePlayers:
    get:
      summary: Return the favorite players that were saved by user
      tags:
        - Users
      parameters:
      responses:
        "200":
          description: data about the user's favorites players returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PlayerPreview"
        "401":
          description: user is not authorized
    post:
      summary: save player in the favorites list of a user
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                playerId:
                  type: string
                  description: player's id which the user saved
                  example: 85
      responses:
        "201":
          description: The player successfully saved as favorite
        "401":
          description: user is not authorized
        "404":
          description: player id does not exist


  /players/PlayerFullDetails/{playerID}:
    get:
      summary: get full deatils about a player
      description: useful for player page
      tags:
        - Players
      parameters:
        - in: path
          name: playerID
          description: players id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: data about the player
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayerFullDetails"
        "404":
          description: playerID does not exists
  /users/favoriteGames:
    get:
      tags:
        - Users
      summary: Return the favorite games of the user
      responses:
        "200":
          description: returned data about the user's favorites games
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Game"
        "401":
          description: user is not authorized

    post:
      summary: save game in the favorites of a user
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                gameID:
                  type: string
                  description: game ID the user want to save
                  example: 7
      responses:
        "201":
          description: The game was successfully added to the favorite list
        "401":
          description: user is not authorized

  /users/lastSearch:
    get:
      tags:
        - Users
      summary: Return user's last search
      responses:
        "200":
          description: user's last search return successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/lastSearch"
        "204":
          description: No search was found
        
        "401":
          description: user is not authorized

  /teams/teamFullDetails/{teamId}:
    get:
      summary: get full deatils about a team
      description: useful for team page
      tags:
        - Teams
      parameters:
        - in: path
          name: teamId
          description: teams id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: data about the team
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
        "404":
          description: teamId does not exists

  /search/{name}:
    get:
      tags:
        - Search
      summary: search for plaery name or team name
      description: get the result of player/team search
      parameters: 
        - name: name
          in: path
          required: true
          description: the name to look for
          schema:
            type: string
      responses:
        '200':
          description: search was succeeded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/search"
        '204':
          description: couldn't find results
        '400':
          description: bad request

  /manage/addGame:
    post:
      tags:
        - Manage
      summary: association rep adds new game
      description: new game added
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/addGameScheme"
      responses:
        "200":
          description: game added successfully
        "400":
          description: wrong input parameters
  /manage/updateGameScores:
    post:
      tags:
        - Manage
      summary: association rep inserts game scores to game
      description: scores added
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                game_id:
                  type: int
                  description: game id the user want to add the scores to
                  example: 7
                local_team_score:
                  type: int
                  description: local team score
                  example: 1
                visitor_team_score:
                  type: int
                  description: visitor team score
                  example: 0

      responses:
        "200":
          description: scores added successfully
        "400":
          description: wrong input parameters
  /manage/addEvent:
    post:
      tags:
        - Manage
      summary: association rep adds event from game
      description: new event added
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: "#/components/schemas/Event"
      responses:
        "200":
          description: event added successfully
        "400":
          description: wrong input parameters
  
  /games/viewGames:
    get:
      tags:
        - Games
      summary: view all games in the league
      responses:
        "200":
          description: return all games
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Game"

components:
  schemas:
    User:
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username conatins between 3 to 8 letters only
          example: ladygaga
        firstname:
          type: string
          description: user's first name
          example: Stefani
        lastname:
          type: string
          description: user's last name
          example: Germanotta
        country:
          type: string
          description: user's country
          example: USA
        password:
          maxLength: 10
          minLength: 5
          type: string
          description:
            password conatins between 5 to 10 chars, at least one of them
            is a number and a special char
          format: password
          example: lady@56
        email:
          pattern: email
          type: string
          description: user's email
          example: ladygaga@gmail.com
        imageurl:
          pattern: URL
          type: string
          description: URL for the user's image
          example: https://cloudinary.com/
      description: Model containing user info

    LoginScheme:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 8
          description: username conatins letters only
          example: ladygaga
        password:
          type: string
          minLength: 5
          maxLength: 10
          format: password
          description: password conatins at least one number and one special char
          example: lady@56

    League:
      type: object
      properties:
        league_name:
          type: string
          description: league name
          example: Superliga
        current_season_name:
          type: string
          description: current season name
          example: "2020/2021"
        current_stage_name:
          type: string
          description: current stage name
          example: Championship Round
        next_game:
          type: object
          description: next game in league
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Game"
    PlayerPreview:
      type: object
      properties:
        name:
          type: string
          description: player's name
          example: Sten Michael Grytebust
        team_name:
          type: string
          description: player's team name
          example: København
        image:
          type: string
          description: player's image
          format: URL
          example: https://cdn.sportmonks.com/images/soccer/players/11/84587.png
        position:
          type: integer
          description: player's position in team
          example: 1

    PlayerFullDetails:
      type: object
      required:
        - name
        - image
        - position
        - team_name
        - common_name
        - nationality
        - birthday
        - birthcountry
        - height
      properties:
        name:
          type: string
          description: player's name
          example: Sten Michael Grytebust
        image:
          type: string
          description: player's image
          format: URL
          example: https://cdn.sportmonks.com/images/soccer/players/11/84587.png
        position:
          type: integer
          description: player's position in team
          example: 1
        team_name:
          type: string
          description: player's team name
          example: København
        common_name:
          type: string
          description: player common name
          example: J. Forrest
        nationality:          
          type: string
          description: player nationality
          example: Scotland
        birthday:
          type: string
          description: player birthday
          example: 07/07/1991
        birthcountry:
          type: string
          description: player birth country
          example: Scotland
        height:
          type: int
          description: player height
          example: 175 cm
        weight:
          type: int
          description: player weight
          example: 80 kg
    Team:
      type: object
      properties:
        name:
          type: string
          description: team name
          example: København
        logo:
          type: string
          description: path of the logo team
          example: https://cdn.sportmonks.com/images//soccer/teams/11/939.png
        players:
          type: array
          items:
            type: object
            $ref: "#/components/schemas/PlayerPreview"

    Game:
      type: object
      properties:
        local_team:
          type: string
          description: local team name
          example: Midtjylland
        visitor_team:
          type: string
          description: visitor team name
          example: København
        local_team_score:
          type: integer
          description: local team score
          example: 0
        visitor_team_score: 
          type: integer
          description: visitor team score
          example: 1
        game_date:
          type: string
          description: date of the game
          example: '2019-09-10 11:30:00'
        field_name:
          type: string
          description: field name of the game
          example: Bloomfield
        referee_name:
          type: string
          description: referee name of the game
          example: Tom 
        event:
          type: array
          items:
            $ref: "#/components/schemas/Event"

    addGameScheme:
      type: object
      properties:
        local_team_id:
          type: int
          example: 85
        visitor_team_id:
          type: int
          example: 211
        game_date:
          type: string
          description: date and time of the game
          example: '07-07-2024 11:00:00'
        field_name:
          type: string 
          description: field of the game
          example: Blomfield
        referee_id:
          type: id
          description: if of the referee for the game
          example: 2

    search:
      type: object
      properties:
        players:
          type: array
          items:
            $ref:  "#/components/schemas/PlayerPreview"
        teams:
          type: array
          items:
            $ref: "#/components/schemas/Team"
        
    eventType: 
      type: string 
      enum:
        - goal
        - injury
        - offense
        - offside
        - redcard
        - substitution
        - yellowcard

    Event:
      type: object
      properties:
        event_time:
          type: string
          description: date and time of game
          example: '2017-08-10 11:30:00'
        
        minute_in_game:
          type: int
          description: The minute where the event accured
          example: 15
          
        event_description:
          type: string 
          description: Description of the event
          example: messi scores a goal
          
        type:
          $ref: '#/components/schemas/eventType'
          description: type of event 

        game_id:
          type: int
          description: id of the game the event belongs to
          example: 10

    lastSearch:
      type: object
      properties:
        query:
          type: string
          description: last query the user search 
          example: /James


